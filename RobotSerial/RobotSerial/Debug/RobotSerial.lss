
RobotSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800112  00800112  00000940  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001546  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d02  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3f  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a1  00000000  00000000  000040f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	50 c0       	rjmp	.+160    	; 0x102 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 33       	cpi	r26, 0x31	; 49
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c5 d0       	rcall	.+394    	; 0x24e <main>
  c4:	e8 c3       	rjmp	.+2000   	; 0x896 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <AD_init>:

void AD_init(void)
{
	
	// set up A/D inputs
	ADCSRA |= 1<<ADPS1 | 1<<ADPS2;  // prescale to get A/d frequency between 50Hkz and 200Khz
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	80 83       	st	Z, r24
	// a/d frequency = F_CPU/prescale = 8mhz/64=125Khz
	ADMUX |= (1<<REFS0); // select AVCC for analog reference voltage.
  d2:	ac e7       	ldi	r26, 0x7C	; 124
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	8c 91       	ld	r24, X
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8c 93       	st	X, r24
	ADCSRA |= 1<<ADIE;  // enable interrupt at end of A/D conversion
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN; // enables the A/D input after setup is done
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADSC; // kick off first A/D conversion
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <getADval>:
	ADCSRA |= 1<<ADSC; // trigger next A/D
} */

uint16_t getADval(uint8_t channel)
{
	return(AD_vals[channel]);
  f0:	e8 2f       	mov	r30, r24
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e5 5e       	subi	r30, 0xE5	; 229
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
}
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	08 95       	ret

00000102 <__vector_24>:

ISR(ADC_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
		uint8_t ADCLowBit = ADCL; // read low bit from ADC - locks register so high bit can be red
 11e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		uint16_t ADCHiBit = ADCH<<8 | ADCLowBit;
 122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	98 2f       	mov	r25, r24
 12a:	88 27       	eor	r24, r24
 12c:	82 2b       	or	r24, r18
		
		AD_vals[ADMUX & 0x07] = ADCHiBit;   // mask higher bits in ADMUX - result of and is A/D pin
 12e:	ac e7       	ldi	r26, 0x7C	; 124
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	ec 91       	ld	r30, X
 134:	e7 70       	andi	r30, 0x07	; 7
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	e5 5e       	subi	r30, 0xE5	; 229
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	91 83       	std	Z+1, r25	; 0x01
 142:	80 83       	st	Z, r24
				
		
		if(ADMUX == 0x47)    // looped through all 8 A/D inputs
 144:	8c 91       	ld	r24, X
 146:	87 34       	cpi	r24, 0x47	; 71
 148:	39 f4       	brne	.+14     	; 0x158 <__vector_24+0x56>
		{
			ADMUX = 0x40;
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			ADComplete = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 156:	05 c0       	rjmp	.+10     	; 0x162 <__vector_24+0x60>
		}
		else
		{
			ADMUX++;
 158:	ec e7       	ldi	r30, 0x7C	; 124
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 83       	st	Z, r24
			
		}
		ADCSRA |= 1<<ADSC; // trigger next A/D
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 83       	st	Z, r24
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <LCDEnableOnOff>:
{
	while(*StringOfCharacters > 0)
	{
		LCDSendCharacter(*StringOfCharacters++);
	}
}
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	85 e8       	ldi	r24, 0x85	; 133
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDEnableOnOff+0x8>
 194:	00 00       	nop
 196:	88 b1       	in	r24, 0x08	; 8
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	08 95       	ret

0000019e <LCDCheckIfBusy>:
 19e:	14 b8       	out	0x04, r1	; 4
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	2f 99       	sbic	0x05, 7	; 5
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <LCDCheckIfBusy+0xe>
 1b0:	eb df       	rcall	.-42     	; 0x188 <LCDEnableOnOff>
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	84 b9       	out	0x04, r24	; 4
 1b6:	08 95       	ret

000001b8 <LCDSendCommand>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	f0 df       	rcall	.-32     	; 0x19e <LCDCheckIfBusy>
 1be:	c5 b9       	out	0x05, r28	; 5
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	83 7f       	andi	r24, 0xF3	; 243
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	e0 df       	rcall	.-64     	; 0x188 <LCDEnableOnOff>
 1c8:	14 b8       	out	0x04, r1	; 4
 1ca:	15 b8       	out	0x05, r1	; 5
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCDGoToPosition>:

void LCDGoToPosition(uint8_t x, uint8_t y) // unit8_t: unsigned integer with 8 bits
{
	int junk = 0;
	junk = (0x80 + LCD1stCharacterPos[y-1] + (x-1));
 1d0:	e6 2f       	mov	r30, r22
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e1 50       	subi	r30, 0x01	; 1
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	20 81       	ld	r18, Z
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	20 58       	subi	r18, 0x80	; 128
 1de:	3f 4f       	sbci	r19, 0xFF	; 255
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	01 97       	sbiw	r24, 0x01	; 1
	LCDSendCommand(junk);
 1e4:	82 0f       	add	r24, r18
 1e6:	e8 cf       	rjmp	.-48     	; 0x1b8 <LCDSendCommand>
 1e8:	08 95       	ret

000001ea <LCD_init>:
}

void LCD_init(void)
{
	//LCD stuff
		LCDDataDirControl  |= 1<<LCDReadWrite | 1<<LCDCRSSel;
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	8c 60       	ori	r24, 0x0C	; 12
 1ee:	8a b9       	out	0x0a, r24	; 10
		LCDEnableDataDir |= 1<<LCDENA;
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f e2       	ldi	r24, 0x2F	; 47
 1f8:	95 e7       	ldi	r25, 0x75	; 117
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_init+0x10>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_init+0x16>
 200:	00 00       	nop
	_delay_ms(15);

	// initialize LCD
	LCDSendCommand(0x01); //Clear Screen 0x01 = 00000001
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	d9 df       	rcall	.-78     	; 0x1b8 <LCDSendCommand>
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_init+0x20>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_init+0x26>
 210:	00 00       	nop
	_delay_ms(2);  // msec
	LCDSendCommand(0x38); // 8 bit mode
 212:	88 e3       	ldi	r24, 0x38	; 56
 214:	d1 df       	rcall	.-94     	; 0x1b8 <LCDSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	95 e8       	ldi	r25, 0x85	; 133
 218:	9a 95       	dec	r25
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_init+0x2e>
	_delay_us(50);  // micro seconds
	LCDSendCommand(0b00001100); // 1, display on, cursor off, not blink
 21c:	00 00       	nop
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	cb df       	rcall	.-106    	; 0x1b8 <LCDSendCommand>
 222:	85 e8       	ldi	r24, 0x85	; 133
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_init+0x3a>
	_delay_us(50);
	LCDSendCommand(0x01); //Clear Screen 0x01 = 00000001
 228:	00 00       	nop
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	c5 df       	rcall	.-118    	; 0x1b8 <LCDSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_init+0x48>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_init+0x4e>
 238:	00 00       	nop
 23a:	08 95       	ret

0000023c <LCDClearScreen>:
	_delay_ms(10); // let things settle.
}

void LCDClearScreen(void)
{
	LCDSendCommand(0x01); //Clear Screen 0x01 = 00000001
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	bc df       	rcall	.-136    	; 0x1b8 <LCDSendCommand>
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCDClearScreen+0x8>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCDClearScreen+0xe>
 24a:	00 00       	nop
 24c:	08 95       	ret

0000024e <main>:
	DDRD |= 1 << PIND5;
	DDRC |= 1 << PINC3;
	DDRC |= 1 << PINC6;
	DDRC |= 1 << PINC7; */

	LCD_init(); // col, row initialize the LCD display
 24e:	cd df       	rcall	.-102    	; 0x1ea <LCD_init>
	LCDGoToPosition(1, 1); // set col, row starting point for string on LCD
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	bd df       	rcall	.-134    	; 0x1d0 <LCDGoToPosition>
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	89 e6       	ldi	r24, 0x69	; 105
 25a:	98 e1       	ldi	r25, 0x18	; 24
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0xe>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x18>
	//	sprintf(numberPC, "Sami Sami");
	//	sprintf(number_str_out, "Sami Sami"); // create start up message
	//LCDSendString(number_str_out); // send it to the LCD
	_delay_ms(1000); //wait for one second.
	AD_init(); // setup the analog inputs.
 266:	00 00       	nop
	USART_vInit();
 268:	2f df       	rcall	.-418    	; 0xc8 <AD_init>
	sei(); // enable interrupts
 26a:	73 d1       	rcall	.+742    	; 0x552 <USART_vInit>
	LCDClearScreen();
 26c:	78 94       	sei
 26e:	e6 df       	rcall	.-52     	; 0x23c <LCDClearScreen>
	HBridgeInit();
 270:	c3 d0       	rcall	.+390    	; 0x3f8 <HBridgeInit>
 272:	c4 e0       	ldi	r28, 0x04	; 4
	uint8_t state = STOP;
 274:	22 c0       	rjmp	.+68     	; 0x2ba <main+0x6c>
 276:	c2 e0       	ldi	r28, 0x02	; 2
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(num);
				
				
				}else if(PC_char == 'l'){
				state = LEFT;
 278:	20 c0       	rjmp	.+64     	; 0x2ba <main+0x6c>
 27a:	c3 e0       	ldi	r28, 0x03	; 3
				}else if (PC_char =='r'){
				state = RIGHT;
 27c:	1e c0       	rjmp	.+60     	; 0x2ba <main+0x6c>
 27e:	c4 e0       	ldi	r28, 0x04	; 4
				}else if(PC_char =='s'){
				state = STOP;
 280:	1c c0       	rjmp	.+56     	; 0x2ba <main+0x6c>
 282:	c5 e0       	ldi	r28, 0x05	; 5
				}else if(PC_char =='a'){
				state = SLEFT;
 284:	1a c0       	rjmp	.+52     	; 0x2ba <main+0x6c>
 286:	c6 e0       	ldi	r28, 0x06	; 6
				}else if(PC_char =='d'){
				state=SRIGHT;
 288:	18 c0       	rjmp	.+48     	; 0x2ba <main+0x6c>
 28a:	c1 e0       	ldi	r28, 0x01	; 1
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(nums);
				
				}else if (PC_char ='f'){
				state = FORWARD;
 28c:	d6 e6       	ldi	r29, 0x66	; 102
			if(PC_char =='l'){
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(nums);
				
				}else if (PC_char ='f'){
 28e:	15 c0       	rjmp	.+42     	; 0x2ba <main+0x6c>
 290:	c1 e0       	ldi	r28, 0x01	; 1
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numss);
				
				}else if (PC_char ='f'){
				state = FORWARD;
 292:	d6 e6       	ldi	r29, 0x66	; 102
			if(PC_char == 'r'){
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numss);
				
				}else if (PC_char ='f'){
 294:	12 c0       	rjmp	.+36     	; 0x2ba <main+0x6c>
 296:	c1 e0       	ldi	r28, 0x01	; 1
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numsss);
				
				}else if (PC_char ='f'){
				state = FORWARD;
 298:	d6 e6       	ldi	r29, 0x66	; 102
			if(PC_char == 's'){
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numsss);
				
				}else if (PC_char ='f'){
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <main+0x6c>
 29c:	c2 e0       	ldi	r28, 0x02	; 2
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numsss);
				
				}else if(PC_char == 'l'){
				state = LEFT;
 29e:	0d c0       	rjmp	.+26     	; 0x2ba <main+0x6c>
 2a0:	c3 e0       	ldi	r28, 0x03	; 3
				}else if (PC_char =='r'){
				state = RIGHT;
 2a2:	0b c0       	rjmp	.+22     	; 0x2ba <main+0x6c>
 2a4:	c4 e0       	ldi	r28, 0x04	; 4
				}else if(PC_char =='s'){
				state = STOP;
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <main+0x6c>
 2a8:	c6 e0       	ldi	r28, 0x06	; 6
				}else if(PC_char =='a'){
				state = SLEFT;
				}else if(PC_char =='d'){
				state=SRIGHT;
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <main+0x6c>
 2ac:	c2 e0       	ldi	r28, 0x02	; 2
				//	LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numsss);
				
				}else if(PC_char == 'l'){
				state = LEFT;
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <main+0x6c>
 2b0:	c3 e0       	ldi	r28, 0x03	; 3
				}else if (PC_char =='r'){
				state = RIGHT;
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <main+0x6c>
 2b4:	c4 e0       	ldi	r28, 0x04	; 4
				}else if(PC_char =='s'){
				state = STOP;
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <main+0x6c>
 2b8:	c5 e0       	ldi	r28, 0x05	; 5
	/* Replace with your application code */
	while (1)
	{
		uint16_t val;
		
		if(ADComplete)
 2ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2be:	88 23       	and	r24, r24
		{
			val= getADval(0);
 2c0:	21 f0       	breq	.+8      	; 0x2ca <main+0x7c>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
			ADComplete =0;
 2c4:	15 df       	rcall	.-470    	; 0xf0 <getADval>
 2c6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		}
		if(serialCheckRxComplete()!= 0)
 2ca:	5c d1       	rcall	.+696    	; 0x584 <serialCheckRxComplete>
 2cc:	88 23       	and	r24, r24
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <main+0x86>
		{
			PC_char = USART_vReceiveByte();
 2d0:	52 d1       	rcall	.+676    	; 0x576 <USART_vReceiveByte>
 2d2:	d8 2f       	mov	r29, r24
 2d4:	c3 30       	cpi	r28, 0x03	; 3
		
		//	HBridgeCommand(0,75,0);
		//	HBridgeCommand(1,75,0);
		//state = STOP;
		
		switch(state){
 2d6:	99 f1       	breq	.+102    	; 0x33e <main+0xf0>
 2d8:	28 f4       	brcc	.+10     	; 0x2e4 <main+0x96>
 2da:	c1 30       	cpi	r28, 0x01	; 1
 2dc:	59 f0       	breq	.+22     	; 0x2f4 <main+0xa6>
 2de:	c2 30       	cpi	r28, 0x02	; 2
 2e0:	11 f1       	breq	.+68     	; 0x326 <main+0xd8>
 2e2:	81 c0       	rjmp	.+258    	; 0x3e6 <main+0x198>
 2e4:	c5 30       	cpi	r28, 0x05	; 5
 2e6:	09 f4       	brne	.+2      	; 0x2ea <main+0x9c>
 2e8:	4b c0       	rjmp	.+150    	; 0x380 <main+0x132>
 2ea:	a8 f1       	brcs	.+106    	; 0x356 <main+0x108>
 2ec:	c6 30       	cpi	r28, 0x06	; 6
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <main+0xa4>
 2f0:	62 c0       	rjmp	.+196    	; 0x3b6 <main+0x168>
			
			//0 is right motor, 1 is left motor
			//1 is forward, 0 is backwards
			
			case FORWARD:
			HBridgeCommand(1,95,0);
 2f2:	79 c0       	rjmp	.+242    	; 0x3e6 <main+0x198>
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	6f e5       	ldi	r22, 0x5F	; 95
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	9d d0       	rcall	.+314    	; 0x436 <HBridgeCommand>
			HBridgeCommand(0,100,0);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	64 e6       	ldi	r22, 0x64	; 100
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	99 d0       	rcall	.+306    	; 0x436 <HBridgeCommand>
 304:	d6 36       	cpi	r29, 0x66	; 102
			if(PC_char == 'f')
 306:	c9 f2       	breq	.-78     	; 0x2ba <main+0x6c>
 308:	dc 36       	cpi	r29, 0x6C	; 108
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(num);
				
				
				}else if(PC_char == 'l'){
 30a:	09 f4       	brne	.+2      	; 0x30e <main+0xc0>
 30c:	b4 cf       	rjmp	.-152    	; 0x276 <main+0x28>
 30e:	d2 37       	cpi	r29, 0x72	; 114
				state = LEFT;
				}else if (PC_char =='r'){
 310:	09 f4       	brne	.+2      	; 0x314 <main+0xc6>
 312:	b3 cf       	rjmp	.-154    	; 0x27a <main+0x2c>
 314:	d3 37       	cpi	r29, 0x73	; 115
				state = RIGHT;
				}else if(PC_char =='s'){
 316:	09 f4       	brne	.+2      	; 0x31a <main+0xcc>
 318:	b2 cf       	rjmp	.-156    	; 0x27e <main+0x30>
				state = STOP;
				}else if(PC_char =='a'){
 31a:	d1 36       	cpi	r29, 0x61	; 97
 31c:	09 f4       	brne	.+2      	; 0x320 <main+0xd2>
				state = SLEFT;
				}else if(PC_char =='d'){
 31e:	b1 cf       	rjmp	.-158    	; 0x282 <main+0x34>
 320:	d4 36       	cpi	r29, 0x64	; 100
 322:	59 f6       	brne	.-106    	; 0x2ba <main+0x6c>
				state=SRIGHT;
				
			}
			break;
			case LEFT:
			HBridgeCommand(0,100,0);
 324:	b0 cf       	rjmp	.-160    	; 0x286 <main+0x38>
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	64 e6       	ldi	r22, 0x64	; 100
 32a:	80 e0       	ldi	r24, 0x00	; 0
			HBridgeCommand(1,0,0);
 32c:	84 d0       	rcall	.+264    	; 0x436 <HBridgeCommand>
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
			if(PC_char =='l'){
 334:	80 d0       	rcall	.+256    	; 0x436 <HBridgeCommand>
 336:	dc 36       	cpi	r29, 0x6C	; 108
 338:	09 f0       	breq	.+2      	; 0x33c <main+0xee>
 33a:	a7 cf       	rjmp	.-178    	; 0x28a <main+0x3c>
				state=SRIGHT;
				
			}
			break;
			case RIGHT:
			HBridgeCommand(1,100,0);
 33c:	be cf       	rjmp	.-132    	; 0x2ba <main+0x6c>
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	64 e6       	ldi	r22, 0x64	; 100
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	78 d0       	rcall	.+240    	; 0x436 <HBridgeCommand>
			HBridgeCommand(0,0,0);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	74 d0       	rcall	.+232    	; 0x436 <HBridgeCommand>
 34e:	d2 37       	cpi	r29, 0x72	; 114
			if(PC_char == 'r'){
 350:	09 f0       	breq	.+2      	; 0x354 <main+0x106>
 352:	9e cf       	rjmp	.-196    	; 0x290 <main+0x42>
 354:	b2 cf       	rjmp	.-156    	; 0x2ba <main+0x6c>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	83 ed       	ldi	r24, 0xD3	; 211
 35a:	90 e3       	ldi	r25, 0x30	; 48
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x10e>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x118>
				
			}
			break;
			case STOP:
			_delay_ms(2000);
			HBridgeCommand(0,0,1);
 366:	00 00       	nop
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	80 e0       	ldi	r24, 0x00	; 0
			HBridgeCommand(1,0,1);
 36e:	63 d0       	rcall	.+198    	; 0x436 <HBridgeCommand>
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	5f d0       	rcall	.+190    	; 0x436 <HBridgeCommand>
			if(PC_char == 's'){
 378:	d3 37       	cpi	r29, 0x73	; 115
 37a:	09 f0       	breq	.+2      	; 0x37e <main+0x130>
 37c:	8c cf       	rjmp	.-232    	; 0x296 <main+0x48>
 37e:	9d cf       	rjmp	.-198    	; 0x2ba <main+0x6c>
				state=SRIGHT;
				
			}
			break;
			case SLEFT:
			HBridgeCommand(0,100,0);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	64 e6       	ldi	r22, 0x64	; 100
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	57 d0       	rcall	.+174    	; 0x436 <HBridgeCommand>
 388:	40 e0       	ldi	r20, 0x00	; 0
			HBridgeCommand(1,60,0);
 38a:	6c e3       	ldi	r22, 0x3C	; 60
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	53 d0       	rcall	.+166    	; 0x436 <HBridgeCommand>
 390:	d1 36       	cpi	r29, 0x61	; 97
 392:	09 f4       	brne	.+2      	; 0x396 <main+0x148>
			if(PC_char == 'a'){
 394:	92 cf       	rjmp	.-220    	; 0x2ba <main+0x6c>
 396:	dc 36       	cpi	r29, 0x6C	; 108
 398:	09 f4       	brne	.+2      	; 0x39c <main+0x14e>
				//LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numsss);
				
				}else if(PC_char == 'l'){
 39a:	80 cf       	rjmp	.-256    	; 0x29c <main+0x4e>
 39c:	d2 37       	cpi	r29, 0x72	; 114
				state = LEFT;
				}else if (PC_char =='r'){
 39e:	09 f4       	brne	.+2      	; 0x3a2 <main+0x154>
 3a0:	7f cf       	rjmp	.-258    	; 0x2a0 <main+0x52>
				state = RIGHT;
				}else if(PC_char =='s'){
 3a2:	d3 37       	cpi	r29, 0x73	; 115
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <main+0x15a>
 3a6:	7e cf       	rjmp	.-260    	; 0x2a4 <main+0x56>
				state = STOP;
				}else if(PC_char =='a'){
 3a8:	d1 36       	cpi	r29, 0x61	; 97
 3aa:	09 f4       	brne	.+2      	; 0x3ae <main+0x160>
 3ac:	86 cf       	rjmp	.-244    	; 0x2ba <main+0x6c>
				state = SLEFT;
				}else if(PC_char =='d'){
 3ae:	d4 36       	cpi	r29, 0x64	; 100
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0x166>
 3b2:	83 cf       	rjmp	.-250    	; 0x2ba <main+0x6c>
 3b4:	79 cf       	rjmp	.-270    	; 0x2a8 <main+0x5a>
				state=SRIGHT;
				
			}
			break;
			case SRIGHT:
			HBridgeCommand(1,100,0);
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	64 e6       	ldi	r22, 0x64	; 100
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	3c d0       	rcall	.+120    	; 0x436 <HBridgeCommand>
 3be:	40 e0       	ldi	r20, 0x00	; 0
			HBridgeCommand(0,60,0);
 3c0:	6c e3       	ldi	r22, 0x3C	; 60
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	38 d0       	rcall	.+112    	; 0x436 <HBridgeCommand>
 3c6:	d4 36       	cpi	r29, 0x64	; 100
			if(PC_char =='d'){
 3c8:	09 f4       	brne	.+2      	; 0x3cc <main+0x17e>
 3ca:	77 cf       	rjmp	.-274    	; 0x2ba <main+0x6c>
				//	LCDClearScreen();
				//sprintf(number_str_out,"%c", PC_char);
				//LCDSendString(numsss);
				
				}else if(PC_char == 'l'){
 3cc:	dc 36       	cpi	r29, 0x6C	; 108
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <main+0x184>
 3d0:	6d cf       	rjmp	.-294    	; 0x2ac <main+0x5e>
				state = LEFT;
				}else if (PC_char =='r'){
 3d2:	d2 37       	cpi	r29, 0x72	; 114
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <main+0x18a>
 3d6:	6c cf       	rjmp	.-296    	; 0x2b0 <main+0x62>
				state = RIGHT;
				}else if(PC_char =='s'){
 3d8:	d3 37       	cpi	r29, 0x73	; 115
 3da:	09 f4       	brne	.+2      	; 0x3de <main+0x190>
 3dc:	6b cf       	rjmp	.-298    	; 0x2b4 <main+0x66>
				state = STOP;
				}else if(PC_char =='a'){
 3de:	d1 36       	cpi	r29, 0x61	; 97
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <main+0x196>
 3e2:	6b cf       	rjmp	.-298    	; 0x2ba <main+0x6c>
 3e4:	69 cf       	rjmp	.-302    	; 0x2b8 <main+0x6a>
				
			}
			break;
			default:
			// code to execute if PC_char doesn't match any of the cases
			HBridgeCommand(1,0,1);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	24 d0       	rcall	.+72     	; 0x436 <HBridgeCommand>
 3ee:	41 e0       	ldi	r20, 0x01	; 1
			HBridgeCommand(0,0,1);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	20 d0       	rcall	.+64     	; 0x436 <HBridgeCommand>
 3f6:	61 cf       	rjmp	.-318    	; 0x2ba <main+0x6c>

000003f8 <HBridgeInit>:

// set up PWM
void HBridgeInit()
{
	// set up port for motor control - set pins as outputs.
	HBridgeDirDataDirPort |= 1 << HBridgeR_FWD | 1 << HBridgeL_FWD
 3f8:	87 b1       	in	r24, 0x07	; 7
 3fa:	80 6f       	ori	r24, 0xF0	; 240
 3fc:	87 b9       	out	0x07, r24	; 7
	| 1 << HBridgeR_REV | 1 << HBridgeL_REV;
	HBridgePWMDataDirPort |= 1 << HBridgeR_ENA | 1 << HBridgeL_ENA;
 3fe:	8a b1       	in	r24, 0x0a	; 10
 400:	80 63       	ori	r24, 0x30	; 48
 402:	8a b9       	out	0x0a, r24	; 10



	// set up for fast PWM, mode 14 using ICR1 on the OC1A and OC1B ports for HBridge, prescale = 8
	// non-inverting
	TCCR1A |= 1 << WGM11 | 1 << COM1A1 | 1 << COM1B1;
 404:	e0 e8       	ldi	r30, 0x80	; 128
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	82 6a       	ori	r24, 0xA2	; 162
 40c:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM12 | 1 << WGM13 | 1 << CS11;
 40e:	e1 e8       	ldi	r30, 0x81	; 129
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	8a 61       	ori	r24, 0x1A	; 26
 416:	80 83       	st	Z, r24
	//WGM10 = 0
	//TIMSK |= 1<< TOIE1 ;  // interrupt on timer/counter 1 overflow
	
	ICR1 = PWM_Period_1; // trigger for end of PWM
 418:	80 ea       	ldi	r24, 0xA0	; 160
 41a:	9f e0       	ldi	r25, 0x0F	; 15
 41c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 420:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; // turn off PWM for now
 424:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 428:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0;
 42c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 430:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 434:	08 95       	ret

00000436 <HBridgeCommand>:


// H-Bridge control.

void HBridgeCommand(uint8_t side, uint8_t speed, uint8_t direction)
{
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	c4 2f       	mov	r28, r20
	// command direction (forward / reverse) for each motor.
	
	double junkx = 0;
	uint16_t junki = 0;
	
	if (side == 0) // 0 = left
 446:	81 11       	cpse	r24, r1
 448:	37 c0       	rjmp	.+110    	; 0x4b8 <HBridgeCommand+0x82>
	{
		if (speed != 0)
 44a:	66 23       	and	r22, r22
 44c:	f9 f0       	breq	.+62     	; 0x48c <HBridgeCommand+0x56>
		{
			HBridgePWMDataDirPort |= (1 << HBridgeL_ENA);  // turn enable back on if necessary
 44e:	8a b1       	in	r24, 0x0a	; 10
 450:	80 62       	ori	r24, 0x20	; 32
 452:	8a b9       	out	0x0a, r24	; 10
			junkx = speed; // cast to float. Left motor
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	2c d1       	rcall	.+600    	; 0x6b4 <__floatunsisf>
			junki = ICR1*(junkx/100);
 45c:	00 91 86 00 	lds	r16, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 460:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	48 ec       	ldi	r20, 0xC8	; 200
 46a:	52 e4       	ldi	r21, 0x42	; 66
 46c:	8f d0       	rcall	.+286    	; 0x58c <__divsf3>
 46e:	6b 01       	movw	r12, r22
 470:	7c 01       	movw	r14, r24
 472:	b8 01       	movw	r22, r16
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	1d d1       	rcall	.+570    	; 0x6b4 <__floatunsisf>
 47a:	a7 01       	movw	r20, r14
 47c:	96 01       	movw	r18, r12
 47e:	a8 d1       	rcall	.+848    	; 0x7d0 <__mulsf3>
 480:	ed d0       	rcall	.+474    	; 0x65c <__fixunssfsi>
			OCR1A = junki;
 482:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 486:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 48a:	03 c0       	rjmp	.+6      	; 0x492 <HBridgeCommand+0x5c>
		}
		else
		{
			HBridgePWMDataDirPort &= ~(1 << HBridgeL_ENA);  // turn enable off
 48c:	8a b1       	in	r24, 0x0a	; 10
 48e:	8f 7d       	andi	r24, 0xDF	; 223
 490:	8a b9       	out	0x0a, r24	; 10
		}
		
		
		if (direction == 0) //forward
 492:	c1 11       	cpse	r28, r1
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <HBridgeCommand+0x6e>
		{
			HBridgeDirPort |= (1 << HBridgeL_FWD); // set forward / reverse ports
 496:	88 b1       	in	r24, 0x08	; 8
 498:	80 64       	ori	r24, 0x40	; 64
 49a:	88 b9       	out	0x08, r24	; 8
			HBridgeDirPort &= ~(1 << HBridgeL_REV); // forward = on, reverse = off
 49c:	88 b1       	in	r24, 0x08	; 8
 49e:	8f 77       	andi	r24, 0x7F	; 127
 4a0:	88 b9       	out	0x08, r24	; 8
 4a2:	3f c0       	rjmp	.+126    	; 0x522 <HBridgeCommand+0xec>
			//HBridgeDC(0) = speed[side]; // speed value from 1 to 100
		} else if (direction == 1)			// reverse
 4a4:	c1 30       	cpi	r28, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <HBridgeCommand+0x74>
 4a8:	3c c0       	rjmp	.+120    	; 0x522 <HBridgeCommand+0xec>
		{
			HBridgeDirPort &= ~(1 << HBridgeL_FWD); // set forward / reverse ports
 4aa:	88 b1       	in	r24, 0x08	; 8
 4ac:	8f 7b       	andi	r24, 0xBF	; 191
 4ae:	88 b9       	out	0x08, r24	; 8
			HBridgeDirPort |= (1 << HBridgeL_REV); // forward = off, reverse = on
 4b0:	88 b1       	in	r24, 0x08	; 8
 4b2:	80 68       	ori	r24, 0x80	; 128
 4b4:	88 b9       	out	0x08, r24	; 8
 4b6:	35 c0       	rjmp	.+106    	; 0x522 <HBridgeCommand+0xec>
			//HBridgeDC(0) = -1*speed[side]; // speed value from -1 to -100
		}
		
	} else // right motor
	{
		if (speed != 0)
 4b8:	66 23       	and	r22, r22
 4ba:	f9 f0       	breq	.+62     	; 0x4fa <HBridgeCommand+0xc4>
		{
			HBridgePWMDataDirPort |= (1 << HBridgeR_ENA);  // turn enable back on if necessary
 4bc:	8a b1       	in	r24, 0x0a	; 10
 4be:	80 61       	ori	r24, 0x10	; 16
			junkx = speed; // cast to float. Left motor
 4c0:	8a b9       	out	0x0a, r24	; 10
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	f5 d0       	rcall	.+490    	; 0x6b4 <__floatunsisf>
			junki = ICR1*(junkx/100);
 4ca:	00 91 86 00 	lds	r16, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 4ce:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	48 ec       	ldi	r20, 0xC8	; 200
 4d8:	52 e4       	ldi	r21, 0x42	; 66
 4da:	58 d0       	rcall	.+176    	; 0x58c <__divsf3>
 4dc:	6b 01       	movw	r12, r22
 4de:	7c 01       	movw	r14, r24
 4e0:	b8 01       	movw	r22, r16
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	e6 d0       	rcall	.+460    	; 0x6b4 <__floatunsisf>
 4e8:	a7 01       	movw	r20, r14
 4ea:	96 01       	movw	r18, r12
 4ec:	71 d1       	rcall	.+738    	; 0x7d0 <__mulsf3>
 4ee:	b6 d0       	rcall	.+364    	; 0x65c <__fixunssfsi>
			OCR1B = junki;
 4f0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4f4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 4f8:	03 c0       	rjmp	.+6      	; 0x500 <HBridgeCommand+0xca>
		}
		else
		{
			HBridgePWMDataDirPort &= ~(1 << HBridgeR_ENA);  // turn enable off
 4fa:	8a b1       	in	r24, 0x0a	; 10
 4fc:	8f 7e       	andi	r24, 0xEF	; 239
 4fe:	8a b9       	out	0x0a, r24	; 10
		}
		
		if (direction == 0) //forward
 500:	c1 11       	cpse	r28, r1
 502:	07 c0       	rjmp	.+14     	; 0x512 <HBridgeCommand+0xdc>
		{
			HBridgeDirPort |= (1 << HBridgeR_FWD); // set forward / reverse ports
 504:	88 b1       	in	r24, 0x08	; 8
 506:	80 61       	ori	r24, 0x10	; 16
 508:	88 b9       	out	0x08, r24	; 8
			HBridgeDirPort &= ~(1 << HBridgeR_REV); // forward = on, reverse = off
 50a:	88 b1       	in	r24, 0x08	; 8
 50c:	8f 7d       	andi	r24, 0xDF	; 223
 50e:	88 b9       	out	0x08, r24	; 8
 510:	08 c0       	rjmp	.+16     	; 0x522 <HBridgeCommand+0xec>
			//HBridgeDC(1) = speed[side]; // speed value from 1 to 100
		} else if (direction == 1)			// reverse
 512:	c1 30       	cpi	r28, 0x01	; 1
 514:	31 f4       	brne	.+12     	; 0x522 <HBridgeCommand+0xec>
		{
			HBridgeDirPort &= ~(1 << HBridgeR_FWD); // set forward / reverse ports
 516:	88 b1       	in	r24, 0x08	; 8
 518:	8f 7e       	andi	r24, 0xEF	; 239
 51a:	88 b9       	out	0x08, r24	; 8
			HBridgeDirPort |= (1 << HBridgeR_REV); // forward = off, reverse = on
 51c:	88 b1       	in	r24, 0x08	; 8
 51e:	80 62       	ori	r24, 0x20	; 32
 520:	88 b9       	out	0x08, r24	; 8
			//HBridgeDC(1) = -1*speed[side]; // speed value from -1 to -100
		}
	}
}
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	08 95       	ret

00000532 <uart_putchar>:

  void USART_vSendByte(uint8_t u8Data)
  {
	  while ((UCSR0A & (1<<UDRE0) == 0)) ;
	  // Transmit data
	  UDR0 = u8Data;  
 532:	cf 93       	push	r28
 534:	c8 2f       	mov	r28, r24
 536:	8a 30       	cpi	r24, 0x0A	; 10
 538:	11 f4       	brne	.+4      	; 0x53e <uart_putchar+0xc>
 53a:	8d e0       	ldi	r24, 0x0D	; 13
 53c:	fa df       	rcall	.-12     	; 0x532 <uart_putchar>
 53e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 542:	85 ff       	sbrs	r24, 5
 544:	fc cf       	rjmp	.-8      	; 0x53e <uart_putchar+0xc>
 546:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <USART_vInit>:
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__iob+0x3>
 55a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__iob+0x2>
 55e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 562:	83 e3       	ldi	r24, 0x33	; 51
 564:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 568:	88 e1       	ldi	r24, 0x18	; 24
 56a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 56e:	8e e0       	ldi	r24, 0x0E	; 14
 570:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 574:	08 95       	ret

00000576 <USART_vReceiveByte>:
  }

uint8_t USART_vReceiveByte(void) {
	// Wait until a byte has been received
	while ((UCSR0A & (1 << RXC0)) == 0)
 576:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 57a:	88 23       	and	r24, r24
 57c:	e4 f7       	brge	.-8      	; 0x576 <USART_vReceiveByte>
	;
	// Return received data
	return UDR0;
 57e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 582:	08 95       	ret

00000584 <serialCheckRxComplete>:
	return 0;
}

uint8_t serialCheckRxComplete(void)
{
	return ((UCSR0A & (1 << RXC0))); // nonzero if serial data is available to read.
 584:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
 588:	80 78       	andi	r24, 0x80	; 128
 58a:	08 95       	ret

0000058c <__divsf3>:
 58c:	0c d0       	rcall	.+24     	; 0x5a6 <__divsf3x>
 58e:	e6 c0       	rjmp	.+460    	; 0x75c <__fp_round>
 590:	de d0       	rcall	.+444    	; 0x74e <__fp_pscB>
 592:	40 f0       	brcs	.+16     	; 0x5a4 <__divsf3+0x18>
 594:	d5 d0       	rcall	.+426    	; 0x740 <__fp_pscA>
 596:	30 f0       	brcs	.+12     	; 0x5a4 <__divsf3+0x18>
 598:	21 f4       	brne	.+8      	; 0x5a2 <__divsf3+0x16>
 59a:	5f 3f       	cpi	r21, 0xFF	; 255
 59c:	19 f0       	breq	.+6      	; 0x5a4 <__divsf3+0x18>
 59e:	c7 c0       	rjmp	.+398    	; 0x72e <__fp_inf>
 5a0:	51 11       	cpse	r21, r1
 5a2:	10 c1       	rjmp	.+544    	; 0x7c4 <__fp_szero>
 5a4:	ca c0       	rjmp	.+404    	; 0x73a <__fp_nan>

000005a6 <__divsf3x>:
 5a6:	eb d0       	rcall	.+470    	; 0x77e <__fp_split3>
 5a8:	98 f3       	brcs	.-26     	; 0x590 <__divsf3+0x4>

000005aa <__divsf3_pse>:
 5aa:	99 23       	and	r25, r25
 5ac:	c9 f3       	breq	.-14     	; 0x5a0 <__divsf3+0x14>
 5ae:	55 23       	and	r21, r21
 5b0:	b1 f3       	breq	.-20     	; 0x59e <__divsf3+0x12>
 5b2:	95 1b       	sub	r25, r21
 5b4:	55 0b       	sbc	r21, r21
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	62 17       	cp	r22, r18
 5bc:	73 07       	cpc	r23, r19
 5be:	84 07       	cpc	r24, r20
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__divsf3_pse+0x26>
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	44 1f       	adc	r20, r20
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a9 f3       	breq	.-22     	; 0x5ba <__divsf3_pse+0x10>
 5d0:	33 d0       	rcall	.+102    	; 0x638 <__divsf3_pse+0x8e>
 5d2:	0e 2e       	mov	r0, r30
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x3a>
 5d6:	e0 e8       	ldi	r30, 0x80	; 128
 5d8:	30 d0       	rcall	.+96     	; 0x63a <__divsf3_pse+0x90>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	e6 95       	lsr	r30
 5e0:	00 1c       	adc	r0, r0
 5e2:	ca f7       	brpl	.-14     	; 0x5d6 <__divsf3_pse+0x2c>
 5e4:	29 d0       	rcall	.+82     	; 0x638 <__divsf3_pse+0x8e>
 5e6:	fe 2f       	mov	r31, r30
 5e8:	27 d0       	rcall	.+78     	; 0x638 <__divsf3_pse+0x8e>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	bb 1f       	adc	r27, r27
 5f2:	26 17       	cp	r18, r22
 5f4:	37 07       	cpc	r19, r23
 5f6:	48 07       	cpc	r20, r24
 5f8:	ab 07       	cpc	r26, r27
 5fa:	b0 e8       	ldi	r27, 0x80	; 128
 5fc:	09 f0       	breq	.+2      	; 0x600 <__divsf3_pse+0x56>
 5fe:	bb 0b       	sbc	r27, r27
 600:	80 2d       	mov	r24, r0
 602:	bf 01       	movw	r22, r30
 604:	ff 27       	eor	r31, r31
 606:	93 58       	subi	r25, 0x83	; 131
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	2a f0       	brmi	.+10     	; 0x616 <__divsf3_pse+0x6c>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	68 f0       	brcs	.+26     	; 0x62c <__divsf3_pse+0x82>
 612:	8d c0       	rjmp	.+282    	; 0x72e <__fp_inf>
 614:	d7 c0       	rjmp	.+430    	; 0x7c4 <__fp_szero>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	ec f3       	brlt	.-6      	; 0x614 <__divsf3_pse+0x6a>
 61a:	98 3e       	cpi	r25, 0xE8	; 232
 61c:	dc f3       	brlt	.-10     	; 0x614 <__divsf3_pse+0x6a>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	9f 5f       	subi	r25, 0xFF	; 255
 62a:	c9 f7       	brne	.-14     	; 0x61e <__divsf3_pse+0x74>
 62c:	88 0f       	add	r24, r24
 62e:	91 1d       	adc	r25, r1
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret
 638:	e1 e0       	ldi	r30, 0x01	; 1
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	bb 1f       	adc	r27, r27
 642:	62 17       	cp	r22, r18
 644:	73 07       	cpc	r23, r19
 646:	84 07       	cpc	r24, r20
 648:	ba 07       	cpc	r27, r26
 64a:	20 f0       	brcs	.+8      	; 0x654 <__divsf3_pse+0xaa>
 64c:	62 1b       	sub	r22, r18
 64e:	73 0b       	sbc	r23, r19
 650:	84 0b       	sbc	r24, r20
 652:	ba 0b       	sbc	r27, r26
 654:	ee 1f       	adc	r30, r30
 656:	88 f7       	brcc	.-30     	; 0x63a <__divsf3_pse+0x90>
 658:	e0 95       	com	r30
 65a:	08 95       	ret

0000065c <__fixunssfsi>:
 65c:	98 d0       	rcall	.+304    	; 0x78e <__fp_splitA>
 65e:	88 f0       	brcs	.+34     	; 0x682 <__fixunssfsi+0x26>
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	90 f0       	brcs	.+36     	; 0x688 <__fixunssfsi+0x2c>
 664:	b9 2f       	mov	r27, r25
 666:	99 27       	eor	r25, r25
 668:	b7 51       	subi	r27, 0x17	; 23
 66a:	a0 f0       	brcs	.+40     	; 0x694 <__fixunssfsi+0x38>
 66c:	d1 f0       	breq	.+52     	; 0x6a2 <__fixunssfsi+0x46>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	1a f0       	brmi	.+6      	; 0x67e <__fixunssfsi+0x22>
 678:	ba 95       	dec	r27
 67a:	c9 f7       	brne	.-14     	; 0x66e <__fixunssfsi+0x12>
 67c:	12 c0       	rjmp	.+36     	; 0x6a2 <__fixunssfsi+0x46>
 67e:	b1 30       	cpi	r27, 0x01	; 1
 680:	81 f0       	breq	.+32     	; 0x6a2 <__fixunssfsi+0x46>
 682:	9f d0       	rcall	.+318    	; 0x7c2 <__fp_zero>
 684:	b1 e0       	ldi	r27, 0x01	; 1
 686:	08 95       	ret
 688:	9c c0       	rjmp	.+312    	; 0x7c2 <__fp_zero>
 68a:	67 2f       	mov	r22, r23
 68c:	78 2f       	mov	r23, r24
 68e:	88 27       	eor	r24, r24
 690:	b8 5f       	subi	r27, 0xF8	; 248
 692:	39 f0       	breq	.+14     	; 0x6a2 <__fixunssfsi+0x46>
 694:	b9 3f       	cpi	r27, 0xF9	; 249
 696:	cc f3       	brlt	.-14     	; 0x68a <__fixunssfsi+0x2e>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b3 95       	inc	r27
 6a0:	d9 f7       	brne	.-10     	; 0x698 <__fixunssfsi+0x3c>
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__fixunssfsi+0x56>
 6a4:	90 95       	com	r25
 6a6:	80 95       	com	r24
 6a8:	70 95       	com	r23
 6aa:	61 95       	neg	r22
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	08 95       	ret

000006b4 <__floatunsisf>:
 6b4:	e8 94       	clt
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <__floatsisf+0x12>

000006b8 <__floatsisf>:
 6b8:	97 fb       	bst	r25, 7
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__floatsisf+0x12>
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	99 23       	and	r25, r25
 6cc:	a9 f0       	breq	.+42     	; 0x6f8 <__floatsisf+0x40>
 6ce:	f9 2f       	mov	r31, r25
 6d0:	96 e9       	ldi	r25, 0x96	; 150
 6d2:	bb 27       	eor	r27, r27
 6d4:	93 95       	inc	r25
 6d6:	f6 95       	lsr	r31
 6d8:	87 95       	ror	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b7 95       	ror	r27
 6e0:	f1 11       	cpse	r31, r1
 6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <__floatsisf+0x1c>
 6e4:	fa f4       	brpl	.+62     	; 0x724 <__floatsisf+0x6c>
 6e6:	bb 0f       	add	r27, r27
 6e8:	11 f4       	brne	.+4      	; 0x6ee <__floatsisf+0x36>
 6ea:	60 ff       	sbrs	r22, 0
 6ec:	1b c0       	rjmp	.+54     	; 0x724 <__floatsisf+0x6c>
 6ee:	6f 5f       	subi	r22, 0xFF	; 255
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	16 c0       	rjmp	.+44     	; 0x724 <__floatsisf+0x6c>
 6f8:	88 23       	and	r24, r24
 6fa:	11 f0       	breq	.+4      	; 0x700 <__floatsisf+0x48>
 6fc:	96 e9       	ldi	r25, 0x96	; 150
 6fe:	11 c0       	rjmp	.+34     	; 0x722 <__floatsisf+0x6a>
 700:	77 23       	and	r23, r23
 702:	21 f0       	breq	.+8      	; 0x70c <__floatsisf+0x54>
 704:	9e e8       	ldi	r25, 0x8E	; 142
 706:	87 2f       	mov	r24, r23
 708:	76 2f       	mov	r23, r22
 70a:	05 c0       	rjmp	.+10     	; 0x716 <__floatsisf+0x5e>
 70c:	66 23       	and	r22, r22
 70e:	71 f0       	breq	.+28     	; 0x72c <__floatsisf+0x74>
 710:	96 e8       	ldi	r25, 0x86	; 134
 712:	86 2f       	mov	r24, r22
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	2a f0       	brmi	.+10     	; 0x724 <__floatsisf+0x6c>
 71a:	9a 95       	dec	r25
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	da f7       	brpl	.-10     	; 0x71a <__floatsisf+0x62>
 724:	88 0f       	add	r24, r24
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <__fp_inf>:
 72e:	97 f9       	bld	r25, 7
 730:	9f 67       	ori	r25, 0x7F	; 127
 732:	80 e8       	ldi	r24, 0x80	; 128
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	08 95       	ret

0000073a <__fp_nan>:
 73a:	9f ef       	ldi	r25, 0xFF	; 255
 73c:	80 ec       	ldi	r24, 0xC0	; 192
 73e:	08 95       	ret

00000740 <__fp_pscA>:
 740:	00 24       	eor	r0, r0
 742:	0a 94       	dec	r0
 744:	16 16       	cp	r1, r22
 746:	17 06       	cpc	r1, r23
 748:	18 06       	cpc	r1, r24
 74a:	09 06       	cpc	r0, r25
 74c:	08 95       	ret

0000074e <__fp_pscB>:
 74e:	00 24       	eor	r0, r0
 750:	0a 94       	dec	r0
 752:	12 16       	cp	r1, r18
 754:	13 06       	cpc	r1, r19
 756:	14 06       	cpc	r1, r20
 758:	05 06       	cpc	r0, r21
 75a:	08 95       	ret

0000075c <__fp_round>:
 75c:	09 2e       	mov	r0, r25
 75e:	03 94       	inc	r0
 760:	00 0c       	add	r0, r0
 762:	11 f4       	brne	.+4      	; 0x768 <__fp_round+0xc>
 764:	88 23       	and	r24, r24
 766:	52 f0       	brmi	.+20     	; 0x77c <__fp_round+0x20>
 768:	bb 0f       	add	r27, r27
 76a:	40 f4       	brcc	.+16     	; 0x77c <__fp_round+0x20>
 76c:	bf 2b       	or	r27, r31
 76e:	11 f4       	brne	.+4      	; 0x774 <__fp_round+0x18>
 770:	60 ff       	sbrs	r22, 0
 772:	04 c0       	rjmp	.+8      	; 0x77c <__fp_round+0x20>
 774:	6f 5f       	subi	r22, 0xFF	; 255
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	08 95       	ret

0000077e <__fp_split3>:
 77e:	57 fd       	sbrc	r21, 7
 780:	90 58       	subi	r25, 0x80	; 128
 782:	44 0f       	add	r20, r20
 784:	55 1f       	adc	r21, r21
 786:	59 f0       	breq	.+22     	; 0x79e <__fp_splitA+0x10>
 788:	5f 3f       	cpi	r21, 0xFF	; 255
 78a:	71 f0       	breq	.+28     	; 0x7a8 <__fp_splitA+0x1a>
 78c:	47 95       	ror	r20

0000078e <__fp_splitA>:
 78e:	88 0f       	add	r24, r24
 790:	97 fb       	bst	r25, 7
 792:	99 1f       	adc	r25, r25
 794:	61 f0       	breq	.+24     	; 0x7ae <__fp_splitA+0x20>
 796:	9f 3f       	cpi	r25, 0xFF	; 255
 798:	79 f0       	breq	.+30     	; 0x7b8 <__fp_splitA+0x2a>
 79a:	87 95       	ror	r24
 79c:	08 95       	ret
 79e:	12 16       	cp	r1, r18
 7a0:	13 06       	cpc	r1, r19
 7a2:	14 06       	cpc	r1, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	f2 cf       	rjmp	.-28     	; 0x78c <__fp_split3+0xe>
 7a8:	46 95       	lsr	r20
 7aa:	f1 df       	rcall	.-30     	; 0x78e <__fp_splitA>
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <__fp_splitA+0x30>
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	18 06       	cpc	r1, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	f1 cf       	rjmp	.-30     	; 0x79a <__fp_splitA+0xc>
 7b8:	86 95       	lsr	r24
 7ba:	71 05       	cpc	r23, r1
 7bc:	61 05       	cpc	r22, r1
 7be:	08 94       	sec
 7c0:	08 95       	ret

000007c2 <__fp_zero>:
 7c2:	e8 94       	clt

000007c4 <__fp_szero>:
 7c4:	bb 27       	eor	r27, r27
 7c6:	66 27       	eor	r22, r22
 7c8:	77 27       	eor	r23, r23
 7ca:	cb 01       	movw	r24, r22
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__mulsf3>:
 7d0:	0b d0       	rcall	.+22     	; 0x7e8 <__mulsf3x>
 7d2:	c4 cf       	rjmp	.-120    	; 0x75c <__fp_round>
 7d4:	b5 df       	rcall	.-150    	; 0x740 <__fp_pscA>
 7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__mulsf3+0x12>
 7d8:	ba df       	rcall	.-140    	; 0x74e <__fp_pscB>
 7da:	18 f0       	brcs	.+6      	; 0x7e2 <__mulsf3+0x12>
 7dc:	95 23       	and	r25, r21
 7de:	09 f0       	breq	.+2      	; 0x7e2 <__mulsf3+0x12>
 7e0:	a6 cf       	rjmp	.-180    	; 0x72e <__fp_inf>
 7e2:	ab cf       	rjmp	.-170    	; 0x73a <__fp_nan>
 7e4:	11 24       	eor	r1, r1
 7e6:	ee cf       	rjmp	.-36     	; 0x7c4 <__fp_szero>

000007e8 <__mulsf3x>:
 7e8:	ca df       	rcall	.-108    	; 0x77e <__fp_split3>
 7ea:	a0 f3       	brcs	.-24     	; 0x7d4 <__mulsf3+0x4>

000007ec <__mulsf3_pse>:
 7ec:	95 9f       	mul	r25, r21
 7ee:	d1 f3       	breq	.-12     	; 0x7e4 <__mulsf3+0x14>
 7f0:	95 0f       	add	r25, r21
 7f2:	50 e0       	ldi	r21, 0x00	; 0
 7f4:	55 1f       	adc	r21, r21
 7f6:	62 9f       	mul	r22, r18
 7f8:	f0 01       	movw	r30, r0
 7fa:	72 9f       	mul	r23, r18
 7fc:	bb 27       	eor	r27, r27
 7fe:	f0 0d       	add	r31, r0
 800:	b1 1d       	adc	r27, r1
 802:	63 9f       	mul	r22, r19
 804:	aa 27       	eor	r26, r26
 806:	f0 0d       	add	r31, r0
 808:	b1 1d       	adc	r27, r1
 80a:	aa 1f       	adc	r26, r26
 80c:	64 9f       	mul	r22, r20
 80e:	66 27       	eor	r22, r22
 810:	b0 0d       	add	r27, r0
 812:	a1 1d       	adc	r26, r1
 814:	66 1f       	adc	r22, r22
 816:	82 9f       	mul	r24, r18
 818:	22 27       	eor	r18, r18
 81a:	b0 0d       	add	r27, r0
 81c:	a1 1d       	adc	r26, r1
 81e:	62 1f       	adc	r22, r18
 820:	73 9f       	mul	r23, r19
 822:	b0 0d       	add	r27, r0
 824:	a1 1d       	adc	r26, r1
 826:	62 1f       	adc	r22, r18
 828:	83 9f       	mul	r24, r19
 82a:	a0 0d       	add	r26, r0
 82c:	61 1d       	adc	r22, r1
 82e:	22 1f       	adc	r18, r18
 830:	74 9f       	mul	r23, r20
 832:	33 27       	eor	r19, r19
 834:	a0 0d       	add	r26, r0
 836:	61 1d       	adc	r22, r1
 838:	23 1f       	adc	r18, r19
 83a:	84 9f       	mul	r24, r20
 83c:	60 0d       	add	r22, r0
 83e:	21 1d       	adc	r18, r1
 840:	82 2f       	mov	r24, r18
 842:	76 2f       	mov	r23, r22
 844:	6a 2f       	mov	r22, r26
 846:	11 24       	eor	r1, r1
 848:	9f 57       	subi	r25, 0x7F	; 127
 84a:	50 40       	sbci	r21, 0x00	; 0
 84c:	8a f0       	brmi	.+34     	; 0x870 <__mulsf3_pse+0x84>
 84e:	e1 f0       	breq	.+56     	; 0x888 <__mulsf3_pse+0x9c>
 850:	88 23       	and	r24, r24
 852:	4a f0       	brmi	.+18     	; 0x866 <__mulsf3_pse+0x7a>
 854:	ee 0f       	add	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	bb 1f       	adc	r27, r27
 85a:	66 1f       	adc	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	88 1f       	adc	r24, r24
 860:	91 50       	subi	r25, 0x01	; 1
 862:	50 40       	sbci	r21, 0x00	; 0
 864:	a9 f7       	brne	.-22     	; 0x850 <__mulsf3_pse+0x64>
 866:	9e 3f       	cpi	r25, 0xFE	; 254
 868:	51 05       	cpc	r21, r1
 86a:	70 f0       	brcs	.+28     	; 0x888 <__mulsf3_pse+0x9c>
 86c:	60 cf       	rjmp	.-320    	; 0x72e <__fp_inf>
 86e:	aa cf       	rjmp	.-172    	; 0x7c4 <__fp_szero>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	ec f3       	brlt	.-6      	; 0x86e <__mulsf3_pse+0x82>
 874:	98 3e       	cpi	r25, 0xE8	; 232
 876:	dc f3       	brlt	.-10     	; 0x86e <__mulsf3_pse+0x82>
 878:	86 95       	lsr	r24
 87a:	77 95       	ror	r23
 87c:	67 95       	ror	r22
 87e:	b7 95       	ror	r27
 880:	f7 95       	ror	r31
 882:	e7 95       	ror	r30
 884:	9f 5f       	subi	r25, 0xFF	; 255
 886:	c1 f7       	brne	.-16     	; 0x878 <__mulsf3_pse+0x8c>
 888:	fe 2b       	or	r31, r30
 88a:	88 0f       	add	r24, r24
 88c:	91 1d       	adc	r25, r1
 88e:	96 95       	lsr	r25
 890:	87 95       	ror	r24
 892:	97 f9       	bld	r25, 7
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
